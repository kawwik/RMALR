//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/79148/RiderProjects/Lab4/Lab4\RMALR.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lab4.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class RMALRParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, IDENTIFIER=11, TOKEN_NAME=12, REGEXP=13, QUESTION_MARK=14, PLUS=15, 
		MULTIPLY=16, QUOTE=17, SKIP_RULE=18, WHITESPACES=19, NEWLINE=20;
	public const int
		RULE_start = 0, RULE_rule_definition = 1, RULE_rule_body = 2, RULE_rule_option = 3, 
		RULE_rule_part = 4, RULE_attribute_list = 5, RULE_attribute = 6, RULE_returned_attributes = 7, 
		RULE_rule_invocation = 8, RULE_argument_list = 9, RULE_argument = 10, 
		RULE_token = 11, RULE_patterns = 12, RULE_pattern = 13, RULE_lexer_rule = 14;
	public static readonly string[] ruleNames = {
		"start", "rule_definition", "rule_body", "rule_option", "rule_part", "attribute_list", 
		"attribute", "returned_attributes", "rule_invocation", "argument_list", 
		"argument", "token", "patterns", "pattern", "lexer_rule"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'|'", "'('", "')'", "'['", "','", "']'", "'returns'", 
		"'->'", null, null, null, "'?'", "'+'", "'*'", "'\"'", "'@skip'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "IDENTIFIER", 
		"TOKEN_NAME", "REGEXP", "QUESTION_MARK", "PLUS", "MULTIPLY", "QUOTE", 
		"SKIP_RULE", "WHITESPACES", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RMALR.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RMALRParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RMALRParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RMALRParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RMALRParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenContext[] token() {
			return GetRuleContexts<TokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenContext token(int i) {
			return GetRuleContext<TokenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_definitionContext[] rule_definition() {
			return GetRuleContexts<Rule_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_definitionContext rule_definition(int i) {
			return GetRuleContext<Rule_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RMALRParser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RMALRParser.NEWLINE, i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER || _la==TOKEN_NAME) {
				{
				{
				State = 32;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TOKEN_NAME:
					{
					State = 30;
					token();
					}
					break;
				case IDENTIFIER:
					{
					State = 31;
					rule_definition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 34;
				Match(T__0);
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 35;
					Match(NEWLINE);
					}
					}
					State = 40;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 46;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RMALRParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext rule_body() {
			return GetRuleContext<Rule_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returned_attributesContext returned_attributes() {
			return GetRuleContext<Returned_attributesContext>(0);
		}
		public Rule_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_definitionContext rule_definition() {
		Rule_definitionContext _localctx = new Rule_definitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(IDENTIFIER);
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 49;
				attribute_list();
				}
			}

			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 52;
				returned_attributes();
				}
			}

			State = 55;
			Match(T__1);
			State = 56;
			rule_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_optionContext[] rule_option() {
			return GetRuleContexts<Rule_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_optionContext rule_option(int i) {
			return GetRuleContext<Rule_optionContext>(i);
		}
		public Rule_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_bodyContext rule_body() {
		Rule_bodyContext _localctx = new Rule_bodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_rule_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			rule_option();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 59;
				Match(T__2);
				State = 60;
				rule_option();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_partContext[] rule_part() {
			return GetRuleContexts<Rule_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_partContext rule_part(int i) {
			return GetRuleContext<Rule_partContext>(i);
		}
		public Rule_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_optionContext rule_option() {
		Rule_optionContext _localctx = new Rule_optionContext(Context, State);
		EnterRule(_localctx, 6, RULE_rule_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 66;
				rule_part(0);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << IDENTIFIER) | (1L << TOKEN_NAME))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_invocationContext rule_invocation() {
			return GetRuleContext<Rule_invocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_NAME() { return GetToken(RMALRParser.TOKEN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext rule_body() {
			return GetRuleContext<Rule_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_partContext rule_part() {
			return GetRuleContext<Rule_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(RMALRParser.QUESTION_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RMALRParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(RMALRParser.MULTIPLY, 0); }
		public Rule_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_partContext rule_part() {
		return rule_part(0);
	}

	private Rule_partContext rule_part(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Rule_partContext _localctx = new Rule_partContext(Context, _parentState);
		Rule_partContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_rule_part, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 72;
				rule_invocation();
				}
				break;
			case TOKEN_NAME:
				{
				State = 73;
				Match(TOKEN_NAME);
				}
				break;
			case T__3:
				{
				State = 74;
				Match(T__3);
				State = 75;
				rule_body();
				State = 76;
				Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 84;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Rule_partContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_rule_part);
					State = 80;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 81;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION_MARK) | (1L << PLUS) | (1L << MULTIPLY))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(T__5);
			State = 88;
			attribute();
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 89;
				Match(T__6);
				State = 90;
				attribute();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RMALRParser.IDENTIFIER, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returned_attributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Returned_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returned_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturned_attributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Returned_attributesContext returned_attributes() {
		Returned_attributesContext _localctx = new Returned_attributesContext(Context, State);
		EnterRule(_localctx, 14, RULE_returned_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__8);
			State = 101;
			attribute_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RMALRParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Rule_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_invocationContext rule_invocation() {
		Rule_invocationContext _localctx = new Rule_invocationContext(Context, State);
		EnterRule(_localctx, 16, RULE_rule_invocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(IDENTIFIER);
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 104;
				argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(T__5);
			State = 108;
			argument();
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 109;
				Match(T__6);
				State = 110;
				argument();
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 116;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RMALRParser.IDENTIFIER, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 20, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_NAME() { return GetToken(RMALRParser.TOKEN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternsContext patterns() {
			return GetRuleContext<PatternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lexer_ruleContext lexer_rule() {
			return GetRuleContext<Lexer_ruleContext>(0);
		}
		public TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenContext token() {
		TokenContext _localctx = new TokenContext(Context, State);
		EnterRule(_localctx, 22, RULE_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(TOKEN_NAME);
			State = 121;
			Match(T__1);
			State = 122;
			patterns();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 123;
				Match(T__9);
				State = 124;
				lexer_rule();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		public PatternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatterns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternsContext patterns() {
		PatternsContext _localctx = new PatternsContext(Context, State);
		EnterRule(_localctx, 24, RULE_patterns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 127;
				pattern();
				}
				}
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TOKEN_NAME || _la==REGEXP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_NAME() { return GetToken(RMALRParser.TOKEN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(RMALRParser.REGEXP, 0); }
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 26, RULE_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_la = TokenStream.LA(1);
			if ( !(_la==TOKEN_NAME || _la==REGEXP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lexer_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_RULE() { return GetToken(RMALRParser.SKIP_RULE, 0); }
		public Lexer_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexer_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALRVisitor<TResult> typedVisitor = visitor as IRMALRVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexer_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lexer_ruleContext lexer_rule() {
		Lexer_ruleContext _localctx = new Lexer_ruleContext(Context, State);
		EnterRule(_localctx, 28, RULE_lexer_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(SKIP_RULE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return rule_part_sempred((Rule_partContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rule_part_sempred(Rule_partContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,20,137,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		1,0,1,0,3,0,33,8,0,1,0,1,0,5,0,37,8,0,10,0,12,0,40,9,0,5,0,42,8,0,10,0,
		12,0,45,9,0,1,0,1,0,1,1,1,1,3,1,51,8,1,1,1,3,1,54,8,1,1,1,1,1,1,1,1,2,
		1,2,1,2,5,2,62,8,2,10,2,12,2,65,9,2,1,3,4,3,68,8,3,11,3,12,3,69,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,3,4,79,8,4,1,4,1,4,5,4,83,8,4,10,4,12,4,86,9,4,1,
		5,1,5,1,5,1,5,5,5,92,8,5,10,5,12,5,95,9,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,
		1,8,1,8,3,8,106,8,8,1,9,1,9,1,9,1,9,5,9,112,8,9,10,9,12,9,115,9,9,1,9,
		1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,3,11,126,8,11,1,12,4,12,129,8,12,
		11,12,12,12,130,1,13,1,13,1,14,1,14,1,14,0,1,8,15,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,0,2,1,0,14,16,1,0,12,13,136,0,43,1,0,0,0,2,48,1,0,0,
		0,4,58,1,0,0,0,6,67,1,0,0,0,8,78,1,0,0,0,10,87,1,0,0,0,12,98,1,0,0,0,14,
		100,1,0,0,0,16,103,1,0,0,0,18,107,1,0,0,0,20,118,1,0,0,0,22,120,1,0,0,
		0,24,128,1,0,0,0,26,132,1,0,0,0,28,134,1,0,0,0,30,33,3,22,11,0,31,33,3,
		2,1,0,32,30,1,0,0,0,32,31,1,0,0,0,33,34,1,0,0,0,34,38,5,1,0,0,35,37,5,
		20,0,0,36,35,1,0,0,0,37,40,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,42,1,
		0,0,0,40,38,1,0,0,0,41,32,1,0,0,0,42,45,1,0,0,0,43,41,1,0,0,0,43,44,1,
		0,0,0,44,46,1,0,0,0,45,43,1,0,0,0,46,47,5,0,0,1,47,1,1,0,0,0,48,50,5,11,
		0,0,49,51,3,10,5,0,50,49,1,0,0,0,50,51,1,0,0,0,51,53,1,0,0,0,52,54,3,14,
		7,0,53,52,1,0,0,0,53,54,1,0,0,0,54,55,1,0,0,0,55,56,5,2,0,0,56,57,3,4,
		2,0,57,3,1,0,0,0,58,63,3,6,3,0,59,60,5,3,0,0,60,62,3,6,3,0,61,59,1,0,0,
		0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,5,1,0,0,0,65,63,1,0,0,0,
		66,68,3,8,4,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,
		70,7,1,0,0,0,71,72,6,4,-1,0,72,79,3,16,8,0,73,79,5,12,0,0,74,75,5,4,0,
		0,75,76,3,4,2,0,76,77,5,5,0,0,77,79,1,0,0,0,78,71,1,0,0,0,78,73,1,0,0,
		0,78,74,1,0,0,0,79,84,1,0,0,0,80,81,10,1,0,0,81,83,7,0,0,0,82,80,1,0,0,
		0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,9,1,0,0,0,86,84,1,0,0,0,
		87,88,5,6,0,0,88,93,3,12,6,0,89,90,5,7,0,0,90,92,3,12,6,0,91,89,1,0,0,
		0,92,95,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,
		0,96,97,5,8,0,0,97,11,1,0,0,0,98,99,5,11,0,0,99,13,1,0,0,0,100,101,5,9,
		0,0,101,102,3,10,5,0,102,15,1,0,0,0,103,105,5,11,0,0,104,106,3,18,9,0,
		105,104,1,0,0,0,105,106,1,0,0,0,106,17,1,0,0,0,107,108,5,6,0,0,108,113,
		3,20,10,0,109,110,5,7,0,0,110,112,3,20,10,0,111,109,1,0,0,0,112,115,1,
		0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,116,1,0,0,0,115,113,1,0,0,0,
		116,117,5,8,0,0,117,19,1,0,0,0,118,119,5,11,0,0,119,21,1,0,0,0,120,121,
		5,12,0,0,121,122,5,2,0,0,122,125,3,24,12,0,123,124,5,10,0,0,124,126,3,
		28,14,0,125,123,1,0,0,0,125,126,1,0,0,0,126,23,1,0,0,0,127,129,3,26,13,
		0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,
		25,1,0,0,0,132,133,7,1,0,0,133,27,1,0,0,0,134,135,5,18,0,0,135,29,1,0,
		0,0,14,32,38,43,50,53,63,69,78,84,93,105,113,125,130
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Lab4.Generated
