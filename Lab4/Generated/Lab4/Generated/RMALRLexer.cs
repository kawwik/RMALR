//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/79148/RiderProjects/Lab4/Lab4\RMALR.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lab4.Generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class RMALRLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, RULE_NAME=5, TOKEN_NAME=6, REGEXP=7, QUOTE=8, 
		SKIP_RULE=9, WHITESPACES=10, NEWLINE=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "RULE_NAME", "TOKEN_NAME", "REGEXP", "QUOTE", 
		"SKIP_RULE", "WHITESPACES", "NEWLINE"
	};


	public RMALRLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RMALRLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'|'", "'->'", null, null, null, "'\"'", "'@skip'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "RULE_NAME", "TOKEN_NAME", "REGEXP", "QUOTE", 
		"SKIP_RULE", "WHITESPACES", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RMALR.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RMALRLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,74,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,
		1,4,1,4,5,4,35,8,4,10,4,12,4,38,9,4,1,5,1,5,5,5,42,8,5,10,5,12,5,45,9,
		5,1,6,1,6,4,6,49,8,6,11,6,12,6,50,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
		1,8,1,9,4,9,64,8,9,11,9,12,9,65,1,9,1,9,1,10,3,10,71,8,10,1,10,1,10,1,
		50,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,3,1,0,
		97,122,3,0,65,90,95,95,97,122,1,0,65,90,78,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
		1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
		0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,23,1,0,0,0,3,25,1,0,0,0,5,27,
		1,0,0,0,7,29,1,0,0,0,9,32,1,0,0,0,11,39,1,0,0,0,13,46,1,0,0,0,15,54,1,
		0,0,0,17,56,1,0,0,0,19,63,1,0,0,0,21,70,1,0,0,0,23,24,5,59,0,0,24,2,1,
		0,0,0,25,26,5,58,0,0,26,4,1,0,0,0,27,28,5,124,0,0,28,6,1,0,0,0,29,30,5,
		45,0,0,30,31,5,62,0,0,31,8,1,0,0,0,32,36,7,0,0,0,33,35,7,1,0,0,34,33,1,
		0,0,0,35,38,1,0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,10,1,0,0,0,38,36,1,
		0,0,0,39,43,7,2,0,0,40,42,7,1,0,0,41,40,1,0,0,0,42,45,1,0,0,0,43,41,1,
		0,0,0,43,44,1,0,0,0,44,12,1,0,0,0,45,43,1,0,0,0,46,48,3,15,7,0,47,49,9,
		0,0,0,48,47,1,0,0,0,49,50,1,0,0,0,50,51,1,0,0,0,50,48,1,0,0,0,51,52,1,
		0,0,0,52,53,3,15,7,0,53,14,1,0,0,0,54,55,5,34,0,0,55,16,1,0,0,0,56,57,
		5,64,0,0,57,58,5,115,0,0,58,59,5,107,0,0,59,60,5,105,0,0,60,61,5,112,0,
		0,61,18,1,0,0,0,62,64,5,32,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,
		0,65,66,1,0,0,0,66,67,1,0,0,0,67,68,6,9,0,0,68,20,1,0,0,0,69,71,5,13,0,
		0,70,69,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,73,5,10,0,0,73,22,1,0,0,
		0,6,0,36,43,50,65,70,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Lab4.Generated
