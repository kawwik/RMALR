//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/79148/RiderProjects/Lab4/Lab4\RMALR_parser.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lab4.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class RMALR_parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IDENTIFIER=1, TOKEN_NAME=2, REGEXP=3, SEMICOLON=4, COLON=5, OPTION_MARK=6, 
		COMMA=7, LEFT_PAR=8, RIGHT_PAR=9, LEFT_SQUARE=10, RIGHT_SQUARE=11, ARROW=12, 
		DOLLAR=13, DOT=14, RETURNS=15, QUESTION_MARK=16, PLUS=17, MULTIPLY=18, 
		QUOTE=19, SKIP_RULE=20, WHITESPACES=21, NEWLINE=22, OPEN_BRACE=23, CLOSE_BRACE=24, 
		CODE=25;
	public const int
		RULE_start = 0, RULE_rule_definition = 1, RULE_rule_body = 2, RULE_rule_option = 3, 
		RULE_rule_part = 4, RULE_attribute_list = 5, RULE_attribute = 6, RULE_returned_attributes = 7, 
		RULE_rule_invocation = 8, RULE_argument_list = 9, RULE_argument = 10, 
		RULE_action = 11, RULE_token = 12, RULE_patterns = 13, RULE_pattern = 14, 
		RULE_lexer_rule = 15;
	public static readonly string[] ruleNames = {
		"start", "rule_definition", "rule_body", "rule_option", "rule_part", "attribute_list", 
		"attribute", "returned_attributes", "rule_invocation", "argument_list", 
		"argument", "action", "token", "patterns", "pattern", "lexer_rule"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "';'", "':'", "'|'", "','", "'('", "')'", "'['", 
		"']'", "'->'", "'$'", "'.'", "'@returns'", "'?'", "'+'", "'*'", "'\"'", 
		"'@skip'", null, null, "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IDENTIFIER", "TOKEN_NAME", "REGEXP", "SEMICOLON", "COLON", "OPTION_MARK", 
		"COMMA", "LEFT_PAR", "RIGHT_PAR", "LEFT_SQUARE", "RIGHT_SQUARE", "ARROW", 
		"DOLLAR", "DOT", "RETURNS", "QUESTION_MARK", "PLUS", "MULTIPLY", "QUOTE", 
		"SKIP_RULE", "WHITESPACES", "NEWLINE", "OPEN_BRACE", "CLOSE_BRACE", "CODE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RMALR_parser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RMALR_parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RMALR_parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RMALR_parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RMALR_parser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(RMALR_parser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(RMALR_parser.SEMICOLON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenContext[] token() {
			return GetRuleContexts<TokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TokenContext token(int i) {
			return GetRuleContext<TokenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_definitionContext[] rule_definition() {
			return GetRuleContexts<Rule_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_definitionContext rule_definition(int i) {
			return GetRuleContext<Rule_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NEWLINE() { return GetTokens(RMALR_parser.NEWLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE(int i) {
			return GetToken(RMALR_parser.NEWLINE, i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IDENTIFIER || _la==TOKEN_NAME) {
				{
				{
				State = 34;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TOKEN_NAME:
					{
					State = 32;
					token();
					}
					break;
				case IDENTIFIER:
					{
					State = 33;
					rule_definition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 36;
				Match(SEMICOLON);
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 37;
					Match(NEWLINE);
					}
					}
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RMALR_parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RMALR_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext rule_body() {
			return GetRuleContext<Rule_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Returned_attributesContext returned_attributes() {
			return GetRuleContext<Returned_attributesContext>(0);
		}
		public Rule_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_definitionContext rule_definition() {
		Rule_definitionContext _localctx = new Rule_definitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(IDENTIFIER);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_SQUARE) {
				{
				State = 51;
				attribute_list();
				}
			}

			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNS) {
				{
				State = 54;
				returned_attributes();
				}
			}

			State = 57;
			Match(COLON);
			State = 58;
			rule_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_optionContext[] rule_option() {
			return GetRuleContexts<Rule_optionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_optionContext rule_option(int i) {
			return GetRuleContext<Rule_optionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTION_MARK() { return GetTokens(RMALR_parser.OPTION_MARK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_MARK(int i) {
			return GetToken(RMALR_parser.OPTION_MARK, i);
		}
		public Rule_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_bodyContext rule_body() {
		Rule_bodyContext _localctx = new Rule_bodyContext(Context, State);
		EnterRule(_localctx, 4, RULE_rule_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			rule_option();
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPTION_MARK) {
				{
				{
				State = 61;
				Match(OPTION_MARK);
				State = 62;
				rule_option();
				}
				}
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_optionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_partContext[] rule_part() {
			return GetRuleContexts<Rule_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_partContext rule_part(int i) {
			return GetRuleContext<Rule_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public Rule_optionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_option(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_optionContext rule_option() {
		Rule_optionContext _localctx = new Rule_optionContext(Context, State);
		EnterRule(_localctx, 6, RULE_rule_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << TOKEN_NAME) | (1L << LEFT_PAR))) != 0)) {
				{
				{
				State = 68;
				rule_part(0);
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACE) {
				{
				State = 74;
				action();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_invocationContext rule_invocation() {
			return GetRuleContext<Rule_invocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_NAME() { return GetToken(RMALR_parser.TOKEN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAR() { return GetToken(RMALR_parser.LEFT_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext rule_body() {
			return GetRuleContext<Rule_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAR() { return GetToken(RMALR_parser.RIGHT_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Rule_partContext rule_part() {
			return GetRuleContext<Rule_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION_MARK() { return GetToken(RMALR_parser.QUESTION_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(RMALR_parser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(RMALR_parser.MULTIPLY, 0); }
		public Rule_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_partContext rule_part() {
		return rule_part(0);
	}

	private Rule_partContext rule_part(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Rule_partContext _localctx = new Rule_partContext(Context, _parentState);
		Rule_partContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_rule_part, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 78;
				rule_invocation();
				}
				break;
			case TOKEN_NAME:
				{
				State = 79;
				Match(TOKEN_NAME);
				}
				break;
			case LEFT_PAR:
				{
				State = 80;
				Match(LEFT_PAR);
				State = 81;
				rule_body();
				State = 82;
				Match(RIGHT_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 90;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Rule_partContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_rule_part);
					State = 86;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 87;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION_MARK) | (1L << PLUS) | (1L << MULTIPLY))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE() { return GetToken(RMALR_parser.LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE() { return GetToken(RMALR_parser.RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RMALR_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RMALR_parser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 10, RULE_attribute_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(LEFT_SQUARE);
			State = 94;
			attribute();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 95;
				Match(COMMA);
				State = 96;
				attribute();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102;
			Match(RIGHT_SQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RMALR_parser.IDENTIFIER, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 12, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Returned_attributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(RMALR_parser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public Returned_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returned_attributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturned_attributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Returned_attributesContext returned_attributes() {
		Returned_attributesContext _localctx = new Returned_attributesContext(Context, State);
		EnterRule(_localctx, 14, RULE_returned_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(RETURNS);
			State = 107;
			attribute_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_invocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RMALR_parser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Rule_invocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_invocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_invocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_invocationContext rule_invocation() {
		Rule_invocationContext _localctx = new Rule_invocationContext(Context, State);
		EnterRule(_localctx, 16, RULE_rule_invocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(IDENTIFIER);
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 110;
				argument_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SQUARE() { return GetToken(RMALR_parser.LEFT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SQUARE() { return GetToken(RMALR_parser.RIGHT_SQUARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(RMALR_parser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(RMALR_parser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 18, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(LEFT_SQUARE);
			State = 114;
			argument();
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 115;
				Match(COMMA);
				State = 116;
				argument();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122;
			Match(RIGHT_SQUARE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(RMALR_parser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RMALR_parser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR() { return GetToken(RMALR_parser.DOLLAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(RMALR_parser.DOT, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 20, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOLLAR) {
				{
				State = 124;
				Match(DOLLAR);
				}
			}

			State = 127;
			Match(IDENTIFIER);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 128;
				Match(DOT);
				State = 129;
				Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACE() { return GetToken(RMALR_parser.OPEN_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(RMALR_parser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACE() { return GetToken(RMALR_parser.CLOSE_BRACE, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 22, RULE_action);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(OPEN_BRACE);
			State = 133;
			Match(CODE);
			State = 134;
			Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_NAME() { return GetToken(RMALR_parser.TOKEN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(RMALR_parser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternsContext patterns() {
			return GetRuleContext<PatternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(RMALR_parser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Lexer_ruleContext lexer_rule() {
			return GetRuleContext<Lexer_ruleContext>(0);
		}
		public TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenContext token() {
		TokenContext _localctx = new TokenContext(Context, State);
		EnterRule(_localctx, 24, RULE_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(TOKEN_NAME);
			State = 137;
			Match(COLON);
			State = 138;
			patterns();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARROW) {
				{
				State = 139;
				Match(ARROW);
				State = 140;
				lexer_rule();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext[] pattern() {
			return GetRuleContexts<PatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern(int i) {
			return GetRuleContext<PatternContext>(i);
		}
		public PatternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatterns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternsContext patterns() {
		PatternsContext _localctx = new PatternsContext(Context, State);
		EnterRule(_localctx, 26, RULE_patterns);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 143;
				pattern();
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==TOKEN_NAME || _la==REGEXP );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKEN_NAME() { return GetToken(RMALR_parser.TOKEN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(RMALR_parser.REGEXP, 0); }
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 28, RULE_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_la = TokenStream.LA(1);
			if ( !(_la==TOKEN_NAME || _la==REGEXP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lexer_ruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_RULE() { return GetToken(RMALR_parser.SKIP_RULE, 0); }
		public Lexer_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexer_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRMALR_parserVisitor<TResult> typedVisitor = visitor as IRMALR_parserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexer_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lexer_ruleContext lexer_rule() {
		Lexer_ruleContext _localctx = new Lexer_ruleContext(Context, State);
		EnterRule(_localctx, 30, RULE_lexer_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(SKIP_RULE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return rule_part_sempred((Rule_partContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rule_part_sempred(Rule_partContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,25,153,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,1,0,1,0,3,0,35,8,0,1,0,1,0,5,0,39,8,0,10,0,12,0,42,9,0,5,0,44,
		8,0,10,0,12,0,47,9,0,1,0,1,0,1,1,1,1,3,1,53,8,1,1,1,3,1,56,8,1,1,1,1,1,
		1,1,1,2,1,2,1,2,5,2,64,8,2,10,2,12,2,67,9,2,1,3,5,3,70,8,3,10,3,12,3,73,
		9,3,1,3,3,3,76,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,85,8,4,1,4,1,4,5,4,
		89,8,4,10,4,12,4,92,9,4,1,5,1,5,1,5,1,5,5,5,98,8,5,10,5,12,5,101,9,5,1,
		5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,3,8,112,8,8,1,9,1,9,1,9,1,9,5,9,118,
		8,9,10,9,12,9,121,9,9,1,9,1,9,1,10,3,10,126,8,10,1,10,1,10,1,10,3,10,131,
		8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,142,8,12,1,13,4,
		13,145,8,13,11,13,12,13,146,1,14,1,14,1,15,1,15,1,15,0,1,8,16,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,0,2,1,0,16,18,1,0,2,3,154,0,45,1,0,
		0,0,2,50,1,0,0,0,4,60,1,0,0,0,6,71,1,0,0,0,8,84,1,0,0,0,10,93,1,0,0,0,
		12,104,1,0,0,0,14,106,1,0,0,0,16,109,1,0,0,0,18,113,1,0,0,0,20,125,1,0,
		0,0,22,132,1,0,0,0,24,136,1,0,0,0,26,144,1,0,0,0,28,148,1,0,0,0,30,150,
		1,0,0,0,32,35,3,24,12,0,33,35,3,2,1,0,34,32,1,0,0,0,34,33,1,0,0,0,35,36,
		1,0,0,0,36,40,5,4,0,0,37,39,5,22,0,0,38,37,1,0,0,0,39,42,1,0,0,0,40,38,
		1,0,0,0,40,41,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,43,34,1,0,0,0,44,47,
		1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,48,1,0,0,0,47,45,1,0,0,0,48,49,
		5,0,0,1,49,1,1,0,0,0,50,52,5,1,0,0,51,53,3,10,5,0,52,51,1,0,0,0,52,53,
		1,0,0,0,53,55,1,0,0,0,54,56,3,14,7,0,55,54,1,0,0,0,55,56,1,0,0,0,56,57,
		1,0,0,0,57,58,5,5,0,0,58,59,3,4,2,0,59,3,1,0,0,0,60,65,3,6,3,0,61,62,5,
		6,0,0,62,64,3,6,3,0,63,61,1,0,0,0,64,67,1,0,0,0,65,63,1,0,0,0,65,66,1,
		0,0,0,66,5,1,0,0,0,67,65,1,0,0,0,68,70,3,8,4,0,69,68,1,0,0,0,70,73,1,0,
		0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,74,76,3,22,
		11,0,75,74,1,0,0,0,75,76,1,0,0,0,76,7,1,0,0,0,77,78,6,4,-1,0,78,85,3,16,
		8,0,79,85,5,2,0,0,80,81,5,8,0,0,81,82,3,4,2,0,82,83,5,9,0,0,83,85,1,0,
		0,0,84,77,1,0,0,0,84,79,1,0,0,0,84,80,1,0,0,0,85,90,1,0,0,0,86,87,10,1,
		0,0,87,89,7,0,0,0,88,86,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,90,91,1,0,
		0,0,91,9,1,0,0,0,92,90,1,0,0,0,93,94,5,10,0,0,94,99,3,12,6,0,95,96,5,7,
		0,0,96,98,3,12,6,0,97,95,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,1,
		0,0,0,100,102,1,0,0,0,101,99,1,0,0,0,102,103,5,11,0,0,103,11,1,0,0,0,104,
		105,5,1,0,0,105,13,1,0,0,0,106,107,5,15,0,0,107,108,3,10,5,0,108,15,1,
		0,0,0,109,111,5,1,0,0,110,112,3,18,9,0,111,110,1,0,0,0,111,112,1,0,0,0,
		112,17,1,0,0,0,113,114,5,10,0,0,114,119,3,20,10,0,115,116,5,7,0,0,116,
		118,3,20,10,0,117,115,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,
		1,0,0,0,120,122,1,0,0,0,121,119,1,0,0,0,122,123,5,11,0,0,123,19,1,0,0,
		0,124,126,5,13,0,0,125,124,1,0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,
		130,5,1,0,0,128,129,5,14,0,0,129,131,5,1,0,0,130,128,1,0,0,0,130,131,1,
		0,0,0,131,21,1,0,0,0,132,133,5,23,0,0,133,134,5,25,0,0,134,135,5,24,0,
		0,135,23,1,0,0,0,136,137,5,2,0,0,137,138,5,5,0,0,138,141,3,26,13,0,139,
		140,5,12,0,0,140,142,3,30,15,0,141,139,1,0,0,0,141,142,1,0,0,0,142,25,
		1,0,0,0,143,145,3,28,14,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,
		0,0,146,147,1,0,0,0,147,27,1,0,0,0,148,149,7,1,0,0,149,29,1,0,0,0,150,
		151,5,20,0,0,151,31,1,0,0,0,17,34,40,45,52,55,65,71,75,84,90,99,111,119,
		125,130,141,146
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Lab4.Generated
