//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/79148/RiderProjects/Lab4/Lab4\lexis.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lab4.Generated.Lexis {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class lexisLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, TOKEN_NAME=3, REGEXP=4, QUOTE=5, WHITESPACES=6, NEWLINE=7;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "TOKEN_NAME", "REGEXP", "QUOTE", "WHITESPACES", "NEWLINE"
	};


	public lexisLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public lexisLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "';'", null, null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "TOKEN_NAME", "REGEXP", "QUOTE", "WHITESPACES", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "lexis.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static lexisLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,7,48,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		1,0,1,0,1,1,1,1,1,2,1,2,5,2,22,8,2,10,2,12,2,25,9,2,1,3,1,3,4,3,29,8,3,
		11,3,12,3,30,1,3,1,3,1,4,1,4,1,5,4,5,38,8,5,11,5,12,5,39,1,5,1,5,1,6,3,
		6,45,8,6,1,6,1,6,1,30,0,7,1,1,3,2,5,3,7,4,9,5,11,6,13,7,1,0,2,1,0,65,90,
		3,0,65,90,95,95,97,122,51,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
		0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,1,15,1,0,0,0,3,17,1,0,0,0,5,
		19,1,0,0,0,7,26,1,0,0,0,9,34,1,0,0,0,11,37,1,0,0,0,13,44,1,0,0,0,15,16,
		5,58,0,0,16,2,1,0,0,0,17,18,5,59,0,0,18,4,1,0,0,0,19,23,7,0,0,0,20,22,
		7,1,0,0,21,20,1,0,0,0,22,25,1,0,0,0,23,21,1,0,0,0,23,24,1,0,0,0,24,6,1,
		0,0,0,25,23,1,0,0,0,26,28,3,9,4,0,27,29,9,0,0,0,28,27,1,0,0,0,29,30,1,
		0,0,0,30,31,1,0,0,0,30,28,1,0,0,0,31,32,1,0,0,0,32,33,3,9,4,0,33,8,1,0,
		0,0,34,35,5,39,0,0,35,10,1,0,0,0,36,38,5,32,0,0,37,36,1,0,0,0,38,39,1,
		0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,41,1,0,0,0,41,42,6,5,0,0,42,12,1,
		0,0,0,43,45,5,13,0,0,44,43,1,0,0,0,44,45,1,0,0,0,45,46,1,0,0,0,46,47,5,
		10,0,0,47,14,1,0,0,0,5,0,23,30,39,44,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Lab4.Generated.Lexis
