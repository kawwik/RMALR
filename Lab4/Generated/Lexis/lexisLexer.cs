//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/79148/RiderProjects/Lab4/Lab4\lexis.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Lab4.Generated.Lexis {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class lexisLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, TOKEN_NAME=4, REGEXP=5, QUOTE=6, SKIP_RULE=7, 
		WHITESPACES=8, NEWLINE=9;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "TOKEN_NAME", "REGEXP", "QUOTE", "SKIP_RULE", 
		"WHITESPACES", "NEWLINE"
	};


	public lexisLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public lexisLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "'->'", "';'", null, null, "'\"'", "'skip'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "TOKEN_NAME", "REGEXP", "QUOTE", "SKIP_RULE", 
		"WHITESPACES", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "lexis.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static lexisLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,9,60,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,5,3,29,8,3,10,3,12,
		3,32,9,3,1,4,1,4,4,4,36,8,4,11,4,12,4,37,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,
		6,1,6,1,7,4,7,50,8,7,11,7,12,7,51,1,7,1,7,1,8,3,8,57,8,8,1,8,1,8,1,37,
		0,9,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,1,0,2,1,0,65,90,3,0,65,90,
		95,95,97,122,63,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,1,19,1,0,0,0,
		3,21,1,0,0,0,5,24,1,0,0,0,7,26,1,0,0,0,9,33,1,0,0,0,11,41,1,0,0,0,13,43,
		1,0,0,0,15,49,1,0,0,0,17,56,1,0,0,0,19,20,5,58,0,0,20,2,1,0,0,0,21,22,
		5,45,0,0,22,23,5,62,0,0,23,4,1,0,0,0,24,25,5,59,0,0,25,6,1,0,0,0,26,30,
		7,0,0,0,27,29,7,1,0,0,28,27,1,0,0,0,29,32,1,0,0,0,30,28,1,0,0,0,30,31,
		1,0,0,0,31,8,1,0,0,0,32,30,1,0,0,0,33,35,3,11,5,0,34,36,9,0,0,0,35,34,
		1,0,0,0,36,37,1,0,0,0,37,38,1,0,0,0,37,35,1,0,0,0,38,39,1,0,0,0,39,40,
		3,11,5,0,40,10,1,0,0,0,41,42,5,34,0,0,42,12,1,0,0,0,43,44,5,115,0,0,44,
		45,5,107,0,0,45,46,5,105,0,0,46,47,5,112,0,0,47,14,1,0,0,0,48,50,5,32,
		0,0,49,48,1,0,0,0,50,51,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,53,1,0,
		0,0,53,54,6,7,0,0,54,16,1,0,0,0,55,57,5,13,0,0,56,55,1,0,0,0,56,57,1,0,
		0,0,57,58,1,0,0,0,58,59,5,10,0,0,59,18,1,0,0,0,5,0,30,37,51,56,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Lab4.Generated.Lexis
